stages:
  - build
  - deploy
  - release

variables:
  GIT_SUBMODULE_STRATEGY: normal

lint-and-test:
  stage: build
  image: $DOCKER_REGISTRY_PULL/rust-builder
  before_script:
    - git config --global url."https://gitlab+deploy-token-2:${OCR_DEPLOY_TOKEN_PASSWORD}@code.ocr.cr14.net/open-cyber-range/public/sdl-parser.git/".insteadOf "ssh://git@code.ocr.cr14.net/open-cyber-range/public/sdl-parser"
    - git clone https://gitlab+deploy-token-2:${OCR_DEPLOY_TOKEN_PASSWORD}@code.ocr.cr14.net/open-cyber-range/public/sdl-parser.git
  script:
    - cargo clippy -- -Dwarnings
    - cargo tarpaulin --skip-clean --out Xml
  coverage: '/^\d+.\d+% coverage/'
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage/cobertura-coverage.xml
  only:
    - develop
    - master
    - merge_requests

build-frontend:
  stage: build
  needs: ["lint-and-test"]
  image: $DOCKER_REGISTRY_PULL/frontend-builder
  script:
    - cd ranger-app
    - yarn
    - yarn build
  artifacts:
    paths:
      - ranger-app/build
  only:
    - master

build-and-upload-x86-64bit-linux-release-for-ranger:
  stage: build
  dependencies:
    - build-frontend
  needs: ["lint-and-test", "build-frontend"]
  image: $DOCKER_REGISTRY_PULL/rust-builder
  before_script:
    - git config --global url."https://gitlab+deploy-token-2:${OCR_DEPLOY_TOKEN_PASSWORD}@code.ocr.cr14.net/open-cyber-range/public/sdl-parser.git/".insteadOf "ssh://git@code.ocr.cr14.net/open-cyber-range/public/sdl-parser"
    - git clone https://gitlab+deploy-token-2:${OCR_DEPLOY_TOKEN_PASSWORD}@code.ocr.cr14.net/open-cyber-range/public/sdl-parser.git
  script:
    - cargo deb --target x86_64-unknown-linux-gnu -p ranger
    - DEB_FILE=$(find ./target/x86_64-unknown-linux-gnu/debian/ -maxdepth 1 -type f -name "*.deb")
    - 'curl -u $OCR_DEPLOYMENT_USER:$OCR_DEPLOYMENT_PASSWORD -X POST -H "Content-Type: multipart/form-data" --data-binary "@$DEB_FILE" $OCR_APT_REPOSITORY'
  only:
    - master

staging:
  variables:
    RANGER: "1"
  stage: deploy
  needs: ["build-and-upload-x86-64bit-linux-release-for-ranger"]
  trigger:
    project: open-cyber-range/internal/support-docker-images
    strategy: depend
  only:
    - master

release-to-internal-network:
  stage: release
  needs: ["staging"]
  script:
    - apt-get update -y && apt-get install openssh-client -y
    - eval $(ssh-agent -s)
    - ssh-add <(echo "$OCR_SERVICE_PRIVATE_KEY")
    - mkdir -p ~/.ssh
    - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'

    - ssh -t service@ranger.ocr.cr14.net "docker kill $(docker ps -q) || echo 'No containers to kill'"
    - ssh -t service@ranger.ocr.cr14.net "docker volume rm $(docker volume ls -q) || echo 'No volumes to remove'"
    - ssh -t service@ranger.ocr.cr14.net "sudo rm -rf deployment"
    - ssh -t service@ranger.ocr.cr14.net "mkdir -p deployment"
    - scp -r ./deployment service@ranger.ocr.cr14.net:~
    - ssh -t service@ranger.ocr.cr14.net "cd deployment && docker compose pull && docker compose up -d --pull always --force-recreate --remove-orphans"
    - ssh -t service@ranger.ocr.cr14.net "docker image prune -f"

    - echo "Ranger deployed, howdy!"
  only:
    - master
  environment:
    name: Internal Production
    url: https://ranger.ocr.cr14.net


