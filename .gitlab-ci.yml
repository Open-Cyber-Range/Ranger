stages:
  - test
  - build
  - deploy

variables:
  GIT_SUBMODULE_STRATEGY: normal
  DOCKER_TLS_CERTDIR: "/certs"

lint-and-test-backend:
  stage: test
  image: $DOCKER_REGISTRY_PULL/rust-builder
  before_script:
    - git config --global url."https://gitlab+deploy-token-2:${OCR_DEPLOY_TOKEN_PASSWORD}@code.ocr.cr14.net/open-cyber-range/public/sdl-parser.git/".insteadOf "ssh://git@code.ocr.cr14.net/open-cyber-range/public/sdl-parser"
    - git clone https://gitlab+deploy-token-2:${OCR_DEPLOY_TOKEN_PASSWORD}@code.ocr.cr14.net/open-cyber-range/public/sdl-parser.git
  script:
    - cargo clippy -- -Dwarnings
    - cargo tarpaulin --skip-clean --out Xml
  coverage: '/^\d+.\d+% coverage/'
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage/cobertura-coverage.xml
  only:
    - develop
    - master
    - merge_requests

lint-and-test-frontend:
  stage: test
  image: $DOCKER_REGISTRY_PULL/frontend-builder
  script:
    - cd ranger-app
    - yarn
    - yarn lint
  only:
    - develop
    - master
    - merge_requests

build-frontend:
  stage: build
  needs: ["lint-and-test-backend", "lint-and-test-frontend"]
  image: $DOCKER_REGISTRY_PULL/frontend-builder
  script:
    - cd ranger-app
    - touch .env.production.local
    - echo -e $OCR_RANGER_UI_ENV >> .env.production.local
    - yarn
    - yarn build
  artifacts:
    paths:
      - ranger-app/build
  only:
    - master

build-and-upload-x86-64bit-linux-release-for-ranger:
  stage: build
  dependencies:
    - build-frontend
  needs: ["build-frontend"]
  image: $DOCKER_REGISTRY_PULL/rust-builder
  before_script:
    - git config --global url."https://gitlab+deploy-token-2:${OCR_DEPLOY_TOKEN_PASSWORD}@code.ocr.cr14.net/open-cyber-range/public/sdl-parser.git/".insteadOf "ssh://git@code.ocr.cr14.net/open-cyber-range/public/sdl-parser"
    - git clone https://gitlab+deploy-token-2:${OCR_DEPLOY_TOKEN_PASSWORD}@code.ocr.cr14.net/open-cyber-range/public/sdl-parser.git
  script:
    - cargo deb --target x86_64-unknown-linux-gnu -p ranger
    - DEB_FILE=$(find ./target/x86_64-unknown-linux-gnu/debian/ -maxdepth 1 -type f -name "*.deb")
    - 'curl -u $OCR_DEPLOYMENT_USER:$OCR_DEPLOYMENT_PASSWORD -X POST -H "Content-Type: multipart/form-data" --data-binary "@$DEB_FILE" $OCR_APT_REPOSITORY'
  only:
    - master

staging:
  stage: deploy
  services:
    - docker:20.10.17-dind
  needs: ["build-and-upload-x86-64bit-linux-release-for-ranger"]
  image: $DOCKER_REGISTRY_PULL/docker:20.10.17
  script:
    - docker info
    - echo "$OCR_DEPLOYMENT_PASSWORD" | docker login $DOCKER_REGISTRY --username $OCR_DEPLOYMENT_USER --password-stdin
    - docker pull $DOCKER_REGISTRY/ranger-server:latest
    - docker build -t ranger-server ./docker
    - docker tag ranger-server:latest $DOCKER_REGISTRY/ranger-server:latest
    - docker push $DOCKER_REGISTRY/ranger-server:latest
  only:
    changes:
      - ranger-server/Dockerfile
  only:
    - master

sync-to-github:
  stage: deploy
  image: $DOCKER_REGISTRY_PULL/ocr-base-deployment-image
  before_script:
    - apt update && apt install -y git
  script:
    - git remote remove github || echo "No repo found"
    - git remote add github https://mannyfred:$MANFRED_GITHUB_TOKEN@github.com/Open-Cyber-Range/Ranger.git
    - git checkout master
    - git pull --rebase origin master
    - git push github master:main --force
  only:
    - master