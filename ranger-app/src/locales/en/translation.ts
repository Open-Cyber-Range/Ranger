const language = {
  homepage: 'Welcome to Ranger!',
  appName: 'Ranger',
  OCR: 'Open Cyber Range',
  documentation: 'Documentation',
  create: 'Create',
  update: 'Update',
  delete: 'Delete',
  exercises: {
    title: 'Exercises',
    add: 'Add exercise',
    name: 'Exercise name',
    scenarioSDL: 'Scenario SDL',
    sdlGuide: 'SDL Reference Guide',
    sdlParserInitFail: 'SDL Parser Initialization Failed',
    sdlParsingFail: 'SDL Parsing failed',
    sdlNotSaved: 'You have unsaved changes in SDL',
    addingSuccess: 'Exercise {{exerciseName}} added',
    addingFail: 'Failed to add the exercise',
    updateSuccess: 'Exercise {{exerciseName}} updated and packages checked',
    updateFail: 'Failed to update the exercise: {{errorMessage}}',
    packageCheckFail: 'Failed to find packages by source {{errorMessage}}',
    bannerDocumentation: 'Banner documentation',
    bannerGuide: 'Banner reference guide',
    easeBannerCreation: 'To ease the creation of the banner: ',
    noBanner: 'No banner exists for this exercise',
    noDeployments: 'No deployments',
    noDeploymentInfo: 'No deployment info',
    deleteSuccess: 'Exercise {{exerciseName}} deleted',
    deleteFail: 'Failed to delete the exercise {{exerciseName}}',
    easeDevelopment: 'To ease the development of the exercise: ',
    mustHaveName: 'Exercise must have a name',
    group: {
      placeholder: 'Select group...',
      title: 'Deployment group',
      required: 'Deployment group is required',
    },
    package: {
      getScenarioSDL: 'Get scenario SDL from Deputy package',
      getBannerPackage: 'Get banner from Deputy package',
      name: {
        placeholder: 'Select package...',
        title: 'Package name',
      },
      version: {
        placeholder: 'Select package version...',
        title: 'Package version',
      },
      success: 'Scenario SDL added successfully',
      fail: 'Failed to add scenario SDL',
    },
    tabs: {
      dashboard: 'Dashboard',
      banner: 'Banner',
      scores: 'Scores',
      deploymentScores: 'Deployment Scores',
      emails: 'Emails',
      emailLogs: 'Email Activity',
      accounts: 'Accounts',
      entities: 'Entity Selector',
      userSubmissions: 'User Submissions',
      sdl: 'SDL',
      events: 'Events',
    },
    estimatedResourcesTitle: 'Estimated resources:',
    estimatedResources: 'Total RAM: {{totalRam}}, total CPUs: {{totalCpu}}',
    estimatedResourcesFail: 'Resource estimation failed',
  },
  deployments: {
    title: 'Deployments',
    add: 'Add new',
    create: 'Create a new deployment',
    addingSuccess: 'Deployment {{newDeploymentName}} added',
    addingFail: 'Failed to add the deployment',
    sdlMissing: 'Exercise must have an sdl-schema',
    deleteSuccess: 'Deployment {{deploymentName}} deleted',
    deleteFail: 'Failed to delete the deployment',
    noDeployments: 'No deployments',
    noAccounts: 'No accounts',
    startTime: 'Start',
    endTime: 'End',
    entitySelect: 'Select an entity',
    entityConnector: {
      entityConnector: 'Entity Connector',
      selectEntity: 'Select entity...',
      selectUser: 'Select user...',
      success: 'Entity connected successfully',
      fail: 'Failed to connect entity',
    },
    entityTree: 'Entity Tree',
    form: {
      name: {
        title: 'Deployment(s) name',
        required: 'Deployment(s) name is required',
      },
      count: {
        title: 'Number of deployments',
        required: 'Number of deployments is required',
      },
      startDate: {
        title: 'Deployment(s) start time',
        required: 'Deployment(s) start time is required',
      },
      adGroups: {
        title: 'AD Group for deployment #{{number}}',
      },
      endDate: {
        title: 'Deployment(s) end time',
        required: 'Deployment(s) end time is required',
        earlierThanStart: 'Deployment(s) end time must be later than start time',
      },
    },
    beingDeployed: 'Deployment can not be deleted while it is being deployed',
    beingDeleted: 'Deployment is being deleted',
    events: {
      title: 'Events',
      triggeredAt: 'Triggered at:',
      description: 'Description:',
      nodes: 'Nodes:',
      conditions: 'Conditions:',
      injects: 'Injects:',
      notifiedEntities: 'Notified entities:',
      noEventsYet: 'No Events to display - deployment in progress',
      noScenarioEvents: 'No Events to display - scenario has no events',
      noTriggeredEvents: 'No Events have been triggered yet',
      noDescription: 'Event has no description',
      notTriggered: 'Event has not been triggered',
      eventWindowClosed: 'Event window closed',
      eventWillOpenIn: 'Event window will open in',
      eventWillCloseIn: 'Event window will close in ',
      eventWillTriggerIn: 'Event will trigger in',
      eventHasTriggered: 'Event has triggered',
      allNodesHaveTriggered: 'All nodes have triggered the event',
      infoOnly: 'This is an informational event and has no conditions nor injects',
      informedEntities: 'Informed Entities:',
    },
    status: {
      showStatusBox: 'Show Deployment Element Statuses',
      hideStatusBox: 'Hide Deployment Element Statuses',
      title: 'Deployment Status',
      success: 'Operation Successful',
      ongoing: 'Operation Ongoing',
      failed: 'Operation Failed',
      removed: 'Element Removed',
      removeFailed: 'Element Removal Failed',
      conditionSuccess: 'Condition Met',
      conditionPolling: 'Condition Checking Ongoing',
      conditionClosed: 'Condition Checking Closed',
      conditionWarning: 'Condition Warning',
      unknown: 'Unknown Status',
      cardFields: {
        handlerReference: 'Handler Reference:',
        type: 'Type:',
        status: 'Status:',
        errorMessage: 'Error Message:',
        stdoutLogs: 'Stdout Logs:',
        stderrLogs: 'Stderr Logs:',
        showErrorMessage: 'Show Error Message',
        hideErrorMessage: 'Hide Error Message',
        showStdoutLogs: 'Show Stdout Logs',
        hideStdoutLogs: 'Hide Stdout Logs',
        showStderrLogs: 'Show Stderr Logs',
        hideStderrLogs: 'Hide Stderr Logs',
      },
    },
    deployerTypes: {
      switch: 'Switch',
      switches: 'Switches',
      template: 'Template',
      templates: 'Templates',
      virtualMachine: 'Virtual Machine',
      virtualMachines: 'Virtual Machines',
      feature: 'Feature',
      features: 'Features',
      condition: 'Condition',
      conditions: 'Conditions',
      inject: 'Inject',
      injects: 'Injects',
      unknown: 'Unknown',
    },
  },
  menu: {
    home: 'Home',
    exercises: 'Exercises',
    logout: 'Logout',
    greeting: 'Hi, {{username}}!',
    userRoles: {
      'ranger-manager': 'Manager',
      'ranger-participant': 'Participant',
      'ranger-client': 'Client',
    },
    noRole: 'NO ROLE',
    logs: 'Logs',
  },
  common: {
    connect: 'Connect',
    required: '(required)',
    submit: 'Submit',
    delete: 'Delete',
    edit: 'Edit',
    back: 'Back',
    deleting: 'Deleting',
    add: 'Add',
    virtualMachines: 'Virtual Machines',
    switches: 'Switches',
    templates: 'Templates',
    team: 'Team',
    noResults: 'No results',
    adGroup: 'AD Group',
    browse: 'Browse',
    points: 'Points',
    searchPlaceholder: 'Search...',
    collapse: 'Collapse',
    expand: 'Expand',
    noSuggestions: 'No suggestions',
  },
  emails: {
    status: 'Status',
    timestamp: 'Timestamp',
    from: 'From',
    to: 'To',
    cc: 'Cc',
    bcc: 'Bcc',
    replyTo: 'Reply to',
    subject: 'Subject',
    body: 'Body',
    sendingSuccess: 'Email sent',
    sendingFail: 'Error trying to send the email: {{errorMessage}}',
    sendingFailWithoutMessage: 'Failed to send the email',
    invalidEmailAddress: 'Invalid email address(es): {{invalidEmailAddresses}}',
    noDeployment: 'Cannot find this deployment',
    noDeployments: 'Cannot find any deployments for this exercise',
    fetchingUsersFail: 'Failed to fetch users',
    creatingEmailsFail: 'Failed to create emails',
    addingTemplateSuccess: 'Email template added',
    addingTemplateFail: 'Failed to add email template {{errorMessage}}',
    addingTemplateFailWithoutMessage: 'Failed to add email template',
    deletingTemplateSuccess: 'Email template deleted',
    deletingTemplateFail: 'Failed to delete email template {{errorMessage}}',
    deletingTemplateFailWithoutMessage: 'Failed to delete email template',
    form: {
      from: {
        title: 'From',
      },
      deploymentSelector: {
        title: 'Selected deployment',
        placeholder: 'Select exercise or specific deployment',
        wholeExercise: 'Exercise-wide',
      },
      to: {
        title: 'To',
        required: 'To address is required',
      },
      replyTo: {
        title: 'Reply to',
      },
      cc: {
        title: 'Cc',
      },
      bcc: {
        title: 'Bcc',
      },
      subject: {
        title: 'Email subject',
        required: 'Email subject is required',
      },
      templateName: {
        name: 'Email template name',
        title: 'Email template',
        placeholder: 'Select existing email template',
        required: 'Email template name is required',
        save: 'Save body as template',
        delete: 'Delete selected template',
      },
      body: {
        title: 'Email body (HTML text editor)',
        required: 'Email body is required',
      },
      preview: 'Preview',
      send: 'Send',
      sendButtonDisabled: 'Fetching users to send emails to...',
      emailPlaceholder:
      '...multiple addresses separated by comma or enter',
      required: ' (required)',
    },
    variables: {
      available: 'Available variables:',
      insert: 'Insert variable',
      exerciseName: 'Exercise\'s name',
      deploymentName: 'Deployment\'s name',
      participantFirstName: 'Participant\'s first name',
      participantLastName: 'Participant\'s last name',
      participantEmail: 'Participant\'s email',
      username: 'Participant\'s username',
    },
    fetchingEmails: 'Fetching emails...',
    fetchingEmailsFail: 'Failed to fetch emails',
    noEmails: 'No emails to display',
    viewBody: 'View email body',
  },
  tloTable: {
    headers: {
      tlo: 'Training Learning Objective',
      evaluation: 'Evaluation',
      metrics: 'Metrics',
      name: 'Name',
      vm: 'VM',
      points: 'Points',
    },
    evaluation: {
      minScore: 'Min score',
      passed: 'Passed',
      notMet: 'Not met',
    },
    noEvaluations: 'No Evaluations to display',
    noTlos: 'No Training Learning Objectives to display',
    noMetricData: 'No metric scores to display',
  },
  chart: {
    scoring: {
      title: 'Score',
      xAxisTitle: 'Time',
      yAxisTitle: 'Points',
      noScoreData: 'No score data available',
    },
  },
  participant: {
    exercise: {
      tabs: {
        dash: 'Dashboard',
        score: 'Score',
        events: 'Events',
        accounts: 'Accounts',
        userSubmissions: 'User Submissions',
      },
      events: {
        noEvents: 'Participant is not connected to any Events in this deployment',
        noTriggeredEvents: 'No Events have been triggered yet',
        noDescription: 'Event has no additional description',
        triggeredAt: 'Event triggered at: {{date}}',
      },
    },
  },
  metricScoring: {
    score: 'Score',
    noManualMetrics: 'No manual metric submissions to score at the moment',
    downloadButtonLoading: 'Downloading...',
    downloadButton: 'Download File',
    textSubmissionPlaceholder: 'No text submission yet...',
    scorePlaceholder: 'Enter a score...',
    updateSuccess: 'Metric successfully updated',
    newSuccess: 'Metric submission successfully created',
    artifactAdded: 'Artifact successfully added',
    notScored: 'Not yet been scored',
    addArtifactPlaceholder: 'Add your artifact...',
    replaceArtifactPlaceholder: 'Replace your artifact...',
    addSubmissionText: 'Add submission text...',
    updateSubmissionButton: 'Update Submission',
    errors: {
      noMetrics: 'Scenario has no manual metrics',
      alreadyScored: 'Submission has already been scored and can no longer be updated',
      notAltered: 'Submissions have not been altered',
      scoreValue: 'Score must be between 0 and {{maxScore}}',
      downloadFailed: 'Download failed',
      updateFailedWithMessage: 'Metric Score update failed: {{errorMessage}}',
      updateFailed: 'Metric Score update failed',
      addMetricFailedWithMessage: 'Adding a new submission failed: {{errorMessage}}',
      addMetricFailed: 'An error occurred while creating a new submission',
      scoreNotSet: 'Score is not set',
    },
  },
  log: {
    date: 'Timestamp',
    level: 'Level',
    message: 'Message',
    empty: 'No logs available.',
  },
  deployment: {
    empty: 'No deployment available.',
  },
  accountsTable: {
    title: 'Accounts',
    vmName: 'VM Name',
    username: 'Username',
    password: 'Password',
    privatekey: 'Private Key',
    copyButton: 'Copy value',
    copyFail: 'Failed to copy value to clipboard: {{errorMessage}}',
    copySuccess: 'Private key copied to clipboard',
  },
  banners: {
    required: 'Required',
    name: 'Banner name',
    content: 'Banner message content',
    createSuccess: 'Banner created',
    createFail: 'Error creating banner: {{errorMessage}}',
    createFailWithoutMessage: 'Failed to create banner',
    updateSuccess: 'Banner updated',
    updateFail: 'Error updating banner: {{errorMessage}}',
    updateFailWithoutMessage: 'Failed to update banner',
    deleteSuccess: 'Banner deleted',
    deleteFail: 'Error deleting banner: {{errorMessage}}',
    deleteFailWithoutMessage: 'Failed to delete banner',
  },
  fallback: {
    role: 'You do not have any roles assigned to you. Please contact your Ranger administrator.',
    notFound: 'We could not find the page you were looking for.',
  },
  scoreTable: {
    orderPlaceholder: 'Order by',
    scoreDescending: 'Score (highest first)',
    scoreAscending: 'Score (lowest first)',
    nameDescending: 'Name (Z-A)',
    nameAscending: 'Name (A-Z)',
    createdAtDescending: 'Deployment time (newest first)',
    createdAtAscending: 'Deployment time (oldest first)',
    rolePlaceholder: 'Sort by role',
    allRoles: 'All roles',
    errorFetchingRoles: 'Error fetching roles',
  },
  orders: {
    title: 'Orders',
    noOrdersCallout: 'No orders have been created yet. Start by creating a new order.',
    createOrder: 'Create order',
    newOrder: 'New order',
    trainingObjectives: 'Training objectives',
    objectives: 'Objectives',
    organization: 'Organization',
    structure: 'Structure',
    environment: 'Environment',
    customElements: 'Custom elements',
    plot: 'Plot',
    order: 'Order',
    loadingOrders: 'Loading orders...',
    loadingOrder: 'Loading order...',
    next: 'Next',
    back: 'Back',
    submit: 'Submit',
    trainingObjective: {
      add: 'Add Training Objective',
      explenation: `Start by creating training objectives for your order.
      Training objectives describe, what the participants are supposed to learn during the exercise.
      Every objective is connected to a list of performance metrics, which are used to evaluate
      trainees progression on achieving training objectives.
      End goal should be to have a list of training objectives, which covers all important threats
      that the participants should be able to handle.
      `,
      objective: 'Objective',
      objectiveRequired: 'Objective is required',
      objectiveMaxLength: 'Objective must be equal or less than 255 characters',
      threats: 'Threats',
      threat: 'Threat',
      threatMaxLength: 'Threat must be equal or less than 255 characters',
      threatRequired: 'Threat is required',
      addNewThreat: 'Add new threat',
      removeLastThreat: 'Remove last threat',
      failedtoAdd: 'Failed to add training objective',
      failedToDelete: 'Failed to delete training objective',
      failedToUpadate: 'Failed to update training objective',
    },
    structureElements: {
      explenation: `
      Establish the organizational structure for your cyber exercise by adding members.
      Members are the exercise participants, each with key details like name and
      description of their role in the structure. Each member is connected to
      associated training objectives they should focus on, and optionally, relevant
      skills and weaknesses that they should or might possess can be specified.
      Use the 'parent ID' field to build hierarchy and simulate real-world organizational dynamics.
      `,
      add: 'Add a member',
      name: 'Name',
      nameRequired: 'Name is required',
      nameMaxLength: 'Name must be equal or less than 255 characters',
      description: 'Description',
      descriptionRequired: 'Description is required',
      descriptionMaxLength: 'Description must be equal or less than 3000 characters',
      noPossibleParents: 'No possible parents',
      noParent: 'No parent',
      parent: 'Parent',
      delete: 'Delete',
      edit: 'Edit',
      failedtoAdd: 'Failed to add member',
      failedToDelete: 'Failed to delete member',
      failedToUpadate: 'Failed to update member',
      addNewSkill: 'Add new skill',
      skill: 'Skill',
      skills: 'Skills',
      skillMaxLength: 'Skill must be equal or less than 255 characters',
      skillRequired: 'Skill is required',
      addNewWeakness: 'Add new weakness',
      weakness: 'Weakness',
      weaknesses: 'Weaknesses',
      weaknessMaxLength: 'Weakness must be equal or less than 255 characters',
      weaknessRequired: 'Weakness is required',
      connectedTrainingObjectives: 'Connected training objectives',
    },
    environmentElements: {
      explenation: `Design the cyber environment where your exercise will unfold and which
      supports the organizational structure. Environment defines a broad category of the
      cyber infrastructure with its weaknesses and strengths relevant to the scenario at hand.
      Additionally, you can specify the size of the element with a rough number of virtual
      machines and add additional info. This environment sets the stage for realistic
      cyber scenarios.`,
      add: 'Add an environment',
      nameRequired: 'Name is required',
      nameMaxLength: 'Name must be equal or less than 255 characters',
      name: 'Name',
      category: 'Category',
      categoryRequired: 'Category is required',
      categoryMaxLength: 'Category must be equal or less than 255 characters',
      size: 'Size',
      sizeRequired: 'Size is required',
      sizeMin: 'Size must be greater than 0',
      additionalInformation: 'Additional information',
      additionalInformationMaxLength: `Additional information must be equal or less than
        3000 characters`,
      addNewStrength: 'Add new strength',
      strength: 'Strength',
      strengthRequired: 'Strength is required',
      strengthMaxLength: 'Strength must be equal or less than 255 characters',
      addNewWeakness: 'Add new weakness',
      weakness: 'Weakness',
      weaknessRequired: 'Weakness is required',
      weaknessMaxLength: 'Weakness must be equal or less than 255 characters',
      failedToAdd: 'Failed to add member',
      failedToDelete: 'Failed to delete member',
      failedToUpadate: 'Failed to update member',
    },
    customElement: {
      explenation: `Integrate your client-specific software into the exercise.
      Provide details for custom elements you want to see incorporated into the
      exercise and upload any necessary files with your exercise request.`,
      add: 'Add a custom element',
      name: 'Name',
      nameRequired: 'Name is required',
      nameMaxLength: 'Name must be equal or less than 255 characters',
      description: 'Description',
      descriptionRequired: 'Description is required',
      descriptionMaxLength: 'Description must be equal or less than 3000 characters',
      connectedTrainingObjectives: 'Connected training objectives',
      environment: 'Environment',
      environmentRequired: 'Environment is required',
      noEnvironment: 'No environment',
      noPossibleEnvironments: 'No possible environments',
      failedToAdd: 'Failed to add custom element',
      failedToDelete: 'Failed to delete custom element',
      failedToUpdate: 'Failed to update custom element',
      file: 'File',
      addFile: 'Add a file',
      updateFile: 'Update the file',
      failedToDownloadFile: 'Failed to download the file',
      fileUploaded: 'File uploaded',
      failedToUploadFile: 'Failed to upload the file',
      browse: 'Browse',
      fileRequired: 'File is required',
      zipFileRequired: 'File must be a .zip file',
      downloadCurrentFile: 'Download current file',
      content: 'Content',
    },
    plotElement: {
      explenation: `Craft the narrative of your exercise. In the Plot section, describe the
      storyline in a free-form text field. Set the start and end times to establish
      the exercise's timeframe. This is to guide the overarching story of the cyber scenario.`,
      plotPointExplenation: `Fine-tune the exercise narrative with Plot Points. Specify events
      or turning points in detail. Add affected members from the structure, set the time for
      the plot point to trigger, and link it to a specific objective if aimed at testing a
      certain skill or accomplishment.`,
      failedToAdd: 'Failed to add plot',
      failedToDelete: 'Failed to delete plot',
      failedToUpdate: 'Failed to update plot',
      add: 'Add a plot',
      name: 'Name',
      nameRequired: 'Name is required',
      nameMaxLength: 'Name must be equal or less than 255 characters',
      addNewPlotPoint: 'Add new plot point',
      descriptionMaxLength: 'Description must be equal or less than 3000 characters',
      description: 'Description',
      plotPointName: 'Name',
      plotPointNameRequired: 'Name is required',
      plotPointNameMaxLength: 'Name must be equal or less than 255 characters',
      plotPointDescription: 'Description',
      plotPointDescriptionMaxLength: 'Description must be equal or less than 3000 characters',
      noEnvironment: 'No environment',
      environment: 'Environment',
      noPossibleEnvironments: 'No possible environments',
      noObjective: 'No objective',
      objective: 'Objective',
      noPossibleObjectives: 'No possible objectives',
      triggerTime: 'Trigger time',
      timeRequired: 'Time is required',
      plotPointConnectedStructures: 'Connected structures',
      startTime: 'Start time',
      endTime: 'End time',
    },
  },
};

export default language;

